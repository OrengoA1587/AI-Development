@page "/"
<link href="css/site.css" rel="stylesheet" />
<link href="css/button-style.css" rel="stylesheet" />
<link href="css/navbar.css" rel="stylesheet" />
<link rel="stylesheet" href="bootstrap2/bootstrap.min.css">


 
<PageTitle>FTCC's' AI Chatbot</PageTitle>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<div>     
    <input class="input-textbox" @bind="topic" placeholder="Enter Message --> "></input>      
    <h3>Temperature</h3>
    <select data-val="true" data-val-required="The Category field is required." id="category" name="1">
        <option value="0">0</option>
        <option value=".1">.1</option>
        <option value=".2">.2</option>
        <option value=".3">.3</option>
        <option value=".4">.4</option>
        <option value=".5">.5</option>
        <option value=".6">.6</option>
        <option value=".7">.7</option>
        <option value=".8">.8</option>
        <option value=".9">.9</option>
        <option value="1">1</option>         
    </select>
</div>

 
 
<p class="chatbot-output-box" style="text-align:justify;display:inline-block;background-color: @backgroundColor;">

    <div>
        <img src="Images/FTCC_AI_Head.png" alt="FTCC Trojan Logo">
         
    </div> 
     
    @for (int i = 0; i < messages.Count; i++)
    {
        if (i % 2 == 0)
        {
            <div class="question" style="color:blue">@user@messages[i]</div>
        }
        else
        {
            <div class="question" style="color:red">@chatBot@messages[i]; </div>
             

        }
         
    }
</p> 
 
<button class="glow-on-hover" @onclick="GenerateMessage">Ask ChatAI</button>
<button class="btn-hover color-2"@onclick="ClearBox">CLEAR</button>
<button class="btn-hover color-4" @onclick="ChangeBackgroundColor">Toggle Blk/Wht</button>
<button class="btn-hover color-3" @onclick="ChangeBackgroundColorRandom">RANDOM COLOR</button>
 


@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Text;
@using System.Net.Http.Headers;
@using System;
@using System.Configuration;
@using System.Collections.Generic;
@using System.Linq;
@using System.Drawing
@using BlazerUI.Data;
@using OpenAI_API;
@inject HttpClient Http;
@code {
    string user = "User: ";
    string chatBot = "ChatBot: ";
    string tempString = "";
    int temp = 0;
    string topic = "";
    string response = "";
    string formattedResponse = "";


    List<string> messages = new List<string>();     

    private async Task GenerateMessage()
    {
        //Console.WriteLine(temp);
        Http = new HttpClient();
        var apiKey = ConfigurationManager.ConnectionStrings["APIKey"].ToString();
        var openAi = new OpenAIAPI(apiKey);
        Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");
        if (topic != "")
        {

            messages.Add(topic);
            var jsonContent = new
            {
                prompt = $"{topic}",
                model = "text-davinci-003",
                temperature = $"{temp}",
                max_tokens = 1000            };
             
             
            var responseContent = await Http.PostAsync("https://api.openai.com/v1/completions", new StringContent(JsonConvert.SerializeObject(jsonContent), Encoding.UTF8, "application/json"));
            var resContext = await responseContent.Content.ReadAsStringAsync();

            var data = JsonConvert.DeserializeObject<dynamic>(resContext);
            messages.Add(data.choices[0].text.ToString());

            topic = "";
        }
        else if (topic == "")
        {

            topic = "What is a question?";
            messages.Add(topic);
            var jsonContent = new
            {
                prompt = $"{topic}",
                model = "text-davinci-003",
                temperature = 1,
                max_tokens = 1000
            };
            var responseContent = await Http.PostAsync("https://api.openai.com/v1/completions", new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(jsonContent), Encoding.UTF8, "application/json"));
            var resContext = await responseContent.Content.ReadAsStringAsync();

            var data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(resContext);
            messages.Add(string.Concat(data.choices[0].text.ToString()));            
            topic = "";
        }
        StateHasChanged();
    }
    private async Task ClearBox()
    {
        topic = "";
        messages.Clear();
        StateHasChanged();
    }
    private string backgroundColor = "white";

    private void ChangeBackgroundColor()
    {
        if (backgroundColor == "white")
        {
            backgroundColor = "black";
        }
        else
        {
            backgroundColor = "white";
        }
    }
    private void ChangeBackgroundColorRandom()
    {
        Color randomColor = GetRandomColor();
        backgroundColor = ColorToHex(randomColor);
    }

    private Color GetRandomColor()
    {
        Random random = new Random();
        return Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
    }

    private string ColorToHex(Color color)
    {
        return $"#{color.R:X2}{color.G:X2}{color.B:X2}";
    }
}
