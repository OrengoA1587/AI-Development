@page "/loginmodal"
@layout BaseLayout
@inject Blazored.SessionStorage.ISessionStorageService session
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@using DataAccessLibrary;
@using System.Web;
@using Microsoft.Extensions.Configuration;
@using BlazerUI.Data
@using Microsoft.AspNetCore.Http;
 
<head>    
    <title></title>
    <link rel="stylesheet" href="css/LoginStylesheet.css" />     
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">      
</head>
 
    <div class="glow-button-container">
        <form class="glow-on-hover">
            <h3 class=" heading-main"><img src="Images/FTCCProjectVITA.png" /></h3>
            <h3>Student Login</h3>
            <label for="username">Username</label>
            <input @bind="username" type="text" placeholder="Username" id="username">
            <label for="password">Password</label>
            <input @bind="password" type="password" placeholder="Password" id="password">

             <div class="social">   
                <div class="go"><a class="fab fa-google"  href="https://www.google.com">oogle</a></div>
                <div class="fb"> <a class="fab fa-facebook" href="https://www.facebook.com/">acebook</a></div>            
            </div>
            <button class="glow-on-hover" type="button" @onclick="Login">Log In</button>
        </form>         
    </div>
 
 
 
 
@using Microsoft.AspNetCore.Http
@inject HttpClient Http;
@inject IConfiguration configuration;
@code {
@inject NavigationManager NavManager
@inject IHttpContextAccessor httpAccessor;
string username = "";
string password = "";
private string connectionString = "";
private string usernameErrorMessage;
private string passwordErrorMessage;
private string sessionData;

PersonModal person = new PersonModal(); 
    
     
    public void Login()
    {
        IConfigurationRoot configurationRoot = new ConfigurationBuilder()
                   .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                   .Build();
        IConfiguration config = configurationRoot;
        connectionString = config.GetConnectionString("Default");
        GetPerson getPerson = new GetPerson();
       
        
        if(getPerson.VerifyPerson(username, password,connectionString) == true)
        {
            // Setting a session variable
            for (int x = 0; x <= 1; x++)
            {
                httpAccessor.HttpContext.Session.SetString("Username", username);
                if (httpAccessor.HttpContext.Session.GetString("Username") == username)
                {
                    httpAccessor.HttpContext.Session.SetString("Username", username);
                    StateHasChanged();
                    NavManager.NavigateTo("LoginTest", true);
                }
                else
                {

                }
            }


        }
        else if (username == "" && password == "")
        {
            //ValidateForm();
        }
        else
        {
            NavManager.NavigateTo("InvalidUser", true);
            
        }              
    }
    private void ValidateForm()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            usernameErrorMessage = "Username is required.";
        }
        else
        {
            usernameErrorMessage = null;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            passwordErrorMessage = "Password is required.";
        }
         
        else
        {
            passwordErrorMessage = null;
        }
    }
    
}
 
